################################################################################
# This workflow is an alternative (and recommended) way for building the application's Docker image using Node2Nix.
# 
# After checking out the application's repository and configuring AWS credentials, 
# this workflow uses Node2Nix to convert package.json and package-lock.json files into Nix expressions. 
# 
# This is followed by the extraction of dev dependencies and their conversion to Nix expressions. 
# The Docker image is then built using these Nix expressions.
#
# Once the Docker image is built, it's pushed to Amazon ECR.
#
# Although this workflow is close to working, it currently fails due to unresolved issues with Node2Nix.
# Hence, further work is required to make this workflow fully functional.
# 
# After pushing the Docker image to Amazon ECR, the workflow triggers the application deployment workflow (4.deploy.yml).
################################################################################


name: 3. Application Image Build (Node2Nix)

on:
  workflow_call:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: superfluid-sentinel
  TF_VERSION: 1.4.6
  TF_ROOT: ./terraform
  TF_BUCKET_NAME: superfluid-tf-state-bucket
  TF_TABLE_NAME: superfluid-tf-lock-table
  TF_STATE_FILE: terraform.tfstate
  SENTINEL_REPO: superfluid-finance/superfluid-sentinel
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-22.04
    outputs:
      image_tag: ${{ env.IMAGE_TAG }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Checkout Application Repository
        uses: actions/checkout@v3
        with:
          repository: ${{ env.SENTINEL_REPO }}
          path: ./app

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Install Nix
        id: install-nix
        uses: cachix/install-nix-action@v21
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      ##############################################################################################################
      # After hours and hours of trying to get node2nix to work, I figured out that:
      #    1. node2nix doesn't work with git+ssh urls
      #    2. Even though mocha is a dev dependency, it is still required to run the app
      #    3. node2nix --development fails with package-lock.json as ganache-core in package-lock.json in the
      #       sentinel repo doesn't have resolved urls and integrity hashes
      #
      # So I decided to do the following:
      #    1. Run node2nix normally to get the dependencies
      #    2. Extract dev dependencies to package.dev.json and run node2nix again to get dev dependencies
      #
      # TODO:
      # That fails too with another error:
      # ERESOLVE overriding peer dependency idealTree:#root Could not resolve dependency:
      ##############################################################################################################

      - name: Install Node2Nix
        run: |
          nix-env -f '<nixpkgs>' -iA nodePackages.node2nix

      - name: Update package-lock.json to use HTTPS instead of SSH
        run: sed -i 's|git+ssh://git@github.com/|git+https://github.com/|g' package-lock.json
        working-directory: ./app

      - name: Convert to Nix Expressions
        run: |
          node2nix \
            --nodejs-16 \
            --input ./app/package.json \
            --lock ./app/package-lock.json \
            --output node-packages.nix \
            --composition node2nix.nix \
            --node-env node-env.nix \
            --no-bypass-cache

      - name: Extract dev to package.dev.json
        uses: sergeysova/jq-action@v2
        with:
          cmd: "jq 'del(.dependencies)' ./app/package.json > ./app/package.dev.json"

      - name: Convert to Nix Expressions (dev)
        run: |
          node2nix \
            --nodejs-16 \
            --input ./app/package.dev.json \
            --output node-packages.dev.nix \
            --composition node2nix.dev.nix \
            --node-env node-env.dev.nix \
            --no-bypass-cache \
            --development \
            --include-peer-dependencies \
          && rm ./app/package.dev.json

      # With Sandbox relaxed, internet is accessible, so build with npm ci
      - name: Build Docker Image using Nix
        id: build-image
        env:
          NIXPKGS_ALLOW_INSECURE: 1
        run: |
          nix-build --option sandbox relaxed build.alt.nix --argstr image_tag ${{ env.IMAGE_TAG }}
          docker load < result

      - name: Push Image to Amazon ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag superfluid-sentinel:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    needs: build
    uses: ./.github/workflows/4.deploy.yml
    secrets: inherit
    with:
      image: ${{ needs.build.outputs.image_tag }}